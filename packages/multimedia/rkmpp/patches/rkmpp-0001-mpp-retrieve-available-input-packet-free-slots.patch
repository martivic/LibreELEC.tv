From 0d5fc7b20b6997418935b422b3704b1a90ad584b Mon Sep 17 00:00:00 2001
From: LongChair <LongChair@hotmail.com>
Date: Wed, 26 Apr 2017 11:45:37 +0200
Subject: [PATCH 1/2] [mpp]: retrieve available input packet free slots

This is something that allows to know before putting a packet into
the decoder if it would accept it or if it is full.

This patch also adds a constant define for the input buffer count
rather than having the 4 hardcoded.

Change-Id: I876e5d4efd0b2e38619ab87d4147a40bedee5669
Signed-off-by: LongChair <LongChair@hotmail.com>
Reviewed-by: ayaka <ayaka@soulik.info>
Signed-off-by: Randy Li <randy.li@rock-chips.com>
---
 inc/rk_mpi_cmd.h |  1 +
 mpp/mpp.cpp      | 13 +++++++++----
 2 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/inc/rk_mpi_cmd.h b/inc/rk_mpi_cmd.h
index 3f2c8d71..a9c58563 100644
--- a/inc/rk_mpi_cmd.h
+++ b/inc/rk_mpi_cmd.h
@@ -97,6 +97,7 @@ typedef enum {
     MPP_DEC_SET_VC1_EXTRA_DATA,
     MPP_DEC_SET_OUTPUT_FORMAT,
     MPP_DEC_SET_DISABLE_ERROR,          /* When set it will disable sw/hw error (H.264 / H.265) */
+    MPP_DEC_GET_FREE_PACKET_SLOT_COUNT,
     MPP_DEC_CMD_END,
 
     MPP_ENC_CMD_BASE                    = CMD_MODULE_CODEC | CMD_CTX_ID_ENC,
diff --git a/mpp/mpp.cpp b/mpp/mpp.cpp
index 164cd60d..1357d1a0 100644
--- a/mpp/mpp.cpp
+++ b/mpp/mpp.cpp
@@ -33,6 +33,7 @@
 
 #define MPP_TEST_FRAME_SIZE     SZ_1M
 #define MPP_TEST_PACKET_SIZE    SZ_512K
+#define MPP_MAX_INPUT_PACKETS   4
 
 Mpp::Mpp()
     : mPackets(NULL),
@@ -102,8 +103,8 @@ MPP_RET Mpp::init(MppCtxType type, MppCodingType coding)
 
             mpp_task_queue_init(&mInputTaskQueue);
             mpp_task_queue_init(&mOutputTaskQueue);
-            mpp_task_queue_setup(mInputTaskQueue, 4);
-            mpp_task_queue_setup(mOutputTaskQueue, 4);
+            mpp_task_queue_setup(mInputTaskQueue, MPP_MAX_INPUT_PACKETS);
+            mpp_task_queue_setup(mOutputTaskQueue, MPP_MAX_INPUT_PACKETS);
         } else {
             mThreadCodec = new MppThread(mpp_dec_advanced_thread, this, "mpp_dec_parser");
 
@@ -258,7 +259,7 @@ MPP_RET Mpp::put_packet(MppPacket packet)
     AutoMutex autoLock(mPackets->mutex());
     RK_U32 eos = mpp_packet_get_eos(packet);
 
-    if (mPackets->list_size() < 4 || eos) {
+    if (mPackets->list_size() < MPP_MAX_INPUT_PACKETS || eos) {
         MppPacket pkt;
         if (MPP_OK != mpp_packet_copy_init(&pkt, packet))
             return MPP_NOK;
@@ -742,7 +743,11 @@ MPP_RET Mpp::control_dec(MpiCmd cmd, MppParam param)
     case MPP_DEC_SET_OUTPUT_FORMAT:
     case MPP_DEC_SET_DISABLE_ERROR: {
         ret = mpp_dec_control(mDec, cmd, param);
-    }
+    } break;
+    case MPP_DEC_GET_FREE_PACKET_SLOT_COUNT: {
+        *((RK_S32 *)param) = MPP_MAX_INPUT_PACKETS - mPackets->list_size();
+         ret = MPP_OK;
+    } break;
     default : {
     } break;
     }
